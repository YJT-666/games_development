
#include <iostream>
#include <string>
#include <set>

// test func class
typedef  int (*PTFunc)();
class FuncTest{
public:
	FuncTest():_num(0){ _sf = new std::set<PTFunc>; }
	~FuncTest(){ delete _sf; }
	void addTestFun(PTFunc pF){ _num++; _sf->insert(pF); }
	void deleteTestFun(PTFunc pF){ if (_num==0) return; SIT sit=_sf->find(pF); if(sit != _sf->end()) {_sf->erase(sit); _num--;} }
	void clearTestFun(){ while(_num) {_sf->clear(); _num=0;} }
	int numOfTestFun(){return _num;}
	
	int selectTestFunRun(PTFunc pF); // return 0 is pass, -1 present no this test function
	int testRun(); // run func test, return number of success
	int selectTestFunRunByName(const String& s) {
private:
	using SIT = std::set<PTFunc>::iterator;
	int _num; // Number of functions to test
	std::set<PTFunc>* _sf; // a set to save test function

};

int FuncTest::testRun(){
	if ( _num <= 0 ) return -1;  // no test function
	
	int pass_count=0, fail_count=0, r=-1;
	for ( SIT it = _sf->begin(); it != _sf->end(); it++){
		try {
			r = (*(*it))();
		} catch (...) {
		   r = -1;
		   std::cout << "error................" << std::endl;
		}
		if ( r==0 ) pass_count++; else fail_count++;
		r = -1;
	}
	return pass_count;
}
int FuncTest::selectTestFunRun(PTFunc pF){
	int r=-1;
	SIT it = _sf->find(pF);
	if (it != _sf->end()){
		try {
			r = (*(*it))();
		} catch (...) {
		   r = 1;
		}
	}
	return r;
}

#include "../../include/display/display.h"
#include "../../include/display/plane.h"



int t_display(){
	Display win(80, 25);
	win.cBuff('o');
	win.sOutline('*');
	win.dis();
	return 0;
}

int t_plane(){
	Display win(80, 25);
	Plane ap(&win, 1, 1);
	ap.draw('x');
	win.dis();
	return 0;
}
int t_1(){
	return 0;
}
int t_2(){
	return 1;
}
int t_0(){
	
	int a = 100;
	int b = 0;
	int c = a / b;
	return c;
}

int main(int argc, char* argv[]){
	FuncTest ft;
	
	// add function
    ft.addTestFun(t_display);
	ft.addTestFun(t_plane);
	ft.addTestFun(t_1);
	ft.addTestFun(t_2);
	ft.addTestFun(t_0);


	int pass_count=0;
	if (argc == 1){
		// test all module
		pass_count =  ft.testRun();
	}else{
		
	}
	std::cout << "total:" << ft.numOfTestFun() <<" " << "pass:" << pass_count << std::endl;

	return 0;
}
